#+TITLE: Emacs Configuration
#+AUTHOR: Brian O'Reilly
#+EMAIL: <fade@deepsky.com>
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
<<<<<<< variant A

>>>>>>> variant B
======= end

* Introduction
  This is my emacs configuration entry point. It is written in the
  [[http://www.orgmode.org][literate programming style]] in this org-mode file. The embedded code
  blocks are extracted when the init.el file is loaded, and then the
  extracted files are loaded to complete the environmental
  configuration.
  
* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Brian O'Reilly"
      user-mail-address "fade@deepsky.com")
#+end_src

* Theme

** human names for colours, colours are abtract enough by nature, especially for me.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+end_src

** Cursor tomfoolery
#+begin_src emacs-lisp
(progn
  (defvar blink-cursor-colors (list
                               ;; "dark slate blue"
                               ;; "medium slate blue"
                               ;; "light slate blue"
                               ;; "steel blue"
                               ;; "royal blue"
                               ;; "light blue"
                               ;; "cyan"
                               ;; "cyan1"
                               ;; "cyan2"
                               ;; "cyan3"
                               ;; "cyan4"
                               "spring green"
                               "yellow"
                               "orange"
                               "red"
                               "hot pink")
    "On each blink the cursor will cycle to the next color in this list.")
  
  (setq blink-cursor-count 0)
  (setq blink-cursor-interval 0.3)
  (defun blink-cursor-timer-function ()
    "Zarza wrote this cyberpunk variant of timer `blink-cursor-timer'. 
     Warning: overwrites original version in `frame.el'.

     This one changes the cursor color on each blink. Define colors in `blink-cursor-colors'."
    (when (not (internal-show-cursor-p))
      (when (>= blink-cursor-count (length blink-cursor-colors))
        (setq blink-cursor-count 0))
      (set-cursor-color (nth blink-cursor-count blink-cursor-colors))
      (setq blink-cursor-count (+ 1 blink-cursor-count))
      )
    (internal-show-cursor nil (not (internal-show-cursor-p)))
    ))
#+end_src

** DeepSky Theme
#+begin_src emacs-lisp
(progn
  (load-theme 'deepsky t)
  (message "Loading theme deepsky")
  (set-face-attribute `mode-line nil
                      :box nil)
  (set-face-attribute `mode-line nil
                      :box nil))
#+end_src   

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Font
[[http://adobe-fonts.github.io/source-code-pro/][
Source Code Pro]] is a nice monospaced font.

To install it on macOS, you can use Homebrew with [[http://caskroom.io/][Homebrew Cask]].

You may need to run the following lines if you haven't set up Homebrew
Cask and its fonts formula.

#+begin_src sh :tangle no
brew install caskroom/cask/brew-cask
brew tap caskroom/fonts

brew cask install font-source-code-pro
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Envy Code R"))

#+end_src

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

* Sane defaults

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)

#+END_SRC
  
Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; tabs never in code. 
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  (setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
;; (use-package page-break-lines
;;   :ensure t)
#+end_src

in dired mode, it is useful to mark a bunch of files and then open
them all in separate buffers. Function implementation taken from Stack
Overflow, here: [[https://stackoverflow.com/questions/1110118/in-emacs-dired-how-to-find-visit-multiple-files][In Emacs dired, how to find/visit multiple files?]]
#+BEGIN_SRC emacs-lisp
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the
point, or when prefix arg, the next N files. "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+END_SRC

* Mac customizations

There are configurations to make when running Emacs on macOS (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(when (string-equal system-type "darwin")
  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")

  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  (setq ns-function-modifier 'hyper)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "s-`" 'other-window)
  
  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "s-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  (defun open-dir-in-finder ()
    "Open a new Finder window to the path of the current buffer"
    (interactive)
    (start-process "mai-open-dir-process" nil "open" "."))
  (bind-key "C-c o f" 'open-dir-in-finder)

  (defun open-dir-in-iterm ()
    "Open the current directory of the buffer in iTerm."
    (interactive)
    (let* ((iterm-app-path "/Applications/iTerm.app")
           (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
           (iterm-path (if (file-directory-p iterm-app-path)
                           iterm-app-path
                         iterm-brew-path)))
      (start-process "mai-open-dir-process" nil "open" "-a" iterm-path ".")))
  (bind-key "C-c o t" 'open-dir-in-iterm)

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on macOS.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+end_src

** El Capitan fixes

[[http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/][El Capitan Fixes]]

#+BEGIN_SRC emacs-lisp
  (cond
   ((string-equal system-type "darwin")
    (let* ((cmd "sw_vers -productVersion")
           (macos-version (string-to-int
                           (cadr (split-string
                                  (shell-command-to-string cmd)
                                  "\\."))))
           (elcapitan-version 11))
      (when (>= macos-version elcapitan-version)
        (setq visible-bell nil)
        (setq ring-bell-function 'ignore)

        ;; El Capitan full screen animation is quick and delightful (enough to start using it).
        (setq ns-use-native-fullscreen t))))
   ;; other system specific things in separate test subclauses
   ((string-equal system-type "gnu/linux")
    (progn
      (message "Gnu Linux System!")))
   ((string-equal system-type "windows-nt")
    (progn
      (message "Oh dear... you're using Windows. :("))))
#+END_SRC

* List buffers

source: http://ergoemacs.org/emacs/emacs_buffer_management.html

Auto-revert-mode updates buffers so that they reflect what's on the
disk. This is particularly useful in the presence of git or other
version control software which can change the files from beneath the
buffers in emacs.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
(global-auto-revert-mode t)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :bind ("C-x C-r" . helm-recentf)
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 200))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :ensure org-plus-contrib
  :config (eval-after-load "org"
            '(require 'ox-md nil t)))
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda/neuranet-agenda.org"
                      "~/Dropbox/Agenda/personal-agenda.org"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))
   

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats. 

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :defer 10
  :ensure t)
#+end_src
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC

exporting to html sometimes (always?) requires htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

* Tramp

#+begin_src emacs-lisp
  (use-package tramp
    :ensure t)
#+end_src

* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("s-<f10>" . whitespace-mode))
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+END_SRC

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9.

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  ;; (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src

** Android mode

#+begin_src emacs-lisp
(use-package android-mode
  :ensure t
  :defer t)
#+end_src
   
** C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t)
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    ;:bind (:map company-mode-map
    ;            (("C-n" . company-select-next)
    ;             ("C-p" . company-select-previous)
    ;             ("C-d" . company-show-doc-buffer)
    ;             ("M-." . company-show-location)))
    :config
    (progn
      ;; company completion everywhere.
      (add-hook 'after-init-hook 'global-company-mode)))
#+end_src   
** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (use-package helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag :defer 10  :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode)
          (use-package helm-swoop
            :ensure t
            :bind ("H-w" . helm-swoop)))
  
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files))) 
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer 10
  :config (setq flycheck-html-tidy-executable "tidy")
  :init (progn
          global-flycheck-mode))
#+end_src

*** Linter setups

Install the HTML5/CSS/JavaScript linters.

#+begin_src sh
brew tap homebrew/dupes
brew install tidy
npm install -g jshint
npm install -g csslint
#+end_src

** Gists

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :commands gist-list)
#+END_SRC

** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :bind ("s-<f6>" . olivetti-mode))
#+end_src

** Perspective

Workspaces in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :ensure t
  :defer t
  :config (persp-mode))
#+end_src

** Projectile
[[http://batsov.com/projectile/][Projectile Home]]

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind ("C-c p p" . projectile-switch-project)
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+end_src

** Python

Integrates with IPython.

#+begin_src emacs-lisp

  ;; (use-package ein
  ;;   :defer t
  ;;   :ensure t)

  (use-package elpy
    :defer t
    :ensure t
    :config
    (setq elpy-rpc-backend "jedi")
    (elpy-use-ipython)  
    (elpy-enable)) 

  ;; (use-package anaconda-mode
  ;;   :defer t
  ;;   :ensure t
  ;;   :init (progn
  ;;           (add-hook 'python-mode-hook 'anaconda-mode)))

  ;; (use-package company-anaconda
  ;;   :defer t
  ;;   :ensure t
  ;;   :config (progn
  ;;             (add-to-list 'company-backends 'company-anaconda)
  ;;             (eval-after-load "company"
  ;;               '(add-to-list 'company-backends 'company-anaconda))))

  (use-package jinja2-mode
    :defer t
    :ensure t)

#+end_src

** Racket

Starting to use Racket now, mainly for programming paradigms class,
though I'm looking forward to some "REPL-driven development" whenever
I get the chance.

#+begin_src emacs-lisp
(use-package racket-mode
  :ensure t
  :commands racket-mode
  :config
  (setq racket-smart-open-bracket-enable t))

(use-package geiser
  :ensure t
  :defer t
  :config
  (setq geiser-default-implementation '(racket)))
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartscan

#+BEGIN_QUOTE
Quickly jumps between other symbols found at point in Emacs.
#+END_QUOTE
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1)
  :bind (("s-n" . smartscan-symbol-go-forward)
         ("s-p" . smartscan-symbol-go-backward)))
#+end_src

** Skewer mode

Live coding for HTML/CSS/JavaScript.

#+begin_src emacs-lisp
(use-package skewer-mode
  :commands skewer-mode
  :ensure t
  :config (skewer-setup))
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+end_src

** Typescript mode

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :defer t)
#+END_SRC

** Visual-regexp
** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+end_src

** w3m for webby reading
#+BEGIN_SRC emacs-lisp
(use-package w3m
  :ensure t
  :defer t
  :config
  (progn
    (setq browse-url-browser-function 'w3m-browse-url)
    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
    (global-set-key "\C-xm" 'browse-url-at-point)
    (setq w3m-use-cookies t)))
#+END_SRC
** Yasnippet

Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
and have also modified them and added my own.

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (yas-global-mode))
#+end_src

** YAML mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :config
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1))))
#+end_src

** Ansible
#+BEGIN_SRC emacs-lisp
(use-package ansible
  :ensure t
  :defer t
  :config
  (use-package ansible-doc
  :ensure t
  :defer t)
  (use-package ansible-vault
    :ensure t
    :defer t)
  (use-package company-ansible
    :ensure t
    :defer t))


#+END_SRC
** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Zoom-frm

=zoom-frm= is a nice package that allows you to resize the text of
entire Emacs frames (this includes text in the buffer, mode line, and
minibuffer). The =zoom-in/out= command acts similar to the
=text-scale-adjust= command---you can chain zooming in, out, or
resetting to the default size once the command has been initially
called.

Changing the =frame-zoom-font-difference= essentially enables a
"presentation mode" when calling =toggle-zoom-frame=.

#+begin_src emacs-lisp :tangle no
;; (use-package zoom-frm 
;;   :ensure t
;;   :bind (("C-M-=" . zoom-in/out)
;;          ("H-z"   . toggle-zoom-frame)
;;          ("s-<f1>" . toggle-zoom-frame))
;;   :config
;;   (setq frame-zoom-font-difference 10))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("M-<f12>" . shell-pop))
#+END_SRC

** Quickrun

#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("H-q" . quickrun))
#+END_SRC

** Visible mode

I found out about this mode by looking through simple.el. I use it to
see raw org-mode files without going to a different mode like
text-mode, which is what I had done in order to see invisible text
(with org hyperlinks). The entire buffer contents will be visible
while still being in org mode.

#+begin_src emacs-lisp
(use-package visible-mode
  :bind (("H-v" . visible-mode)
         ("s-<f2>" . visible-mode)))
#+end_src

** Virtualenvwrapper

#+BEGIN_SRC emacs-lisp
;; (use-package virtualenvwrapper
;;   :ensure t
;;   :defer t
;;   :config
;;   (setq venv-location "~/.virtualenvs"))
#+END_SRC

** XQuery mode

#+BEGIN_SRC emacs-lisp
(use-package xquery-mode
  :ensure t
  :defer t)
#+END_SRC
** LaTeX Extra

#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :defer t
  :ensure t)
#+END_SRC

** LaTeX Preview Mode

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :ensure t
  :defer t)
#+END_SRC
** Undo Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)
#+END_SRC

** Crux

Collection of Ridiculously Useful eXtensions

#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c u" . crux-view-url)))
#+END_SRC


* Computer-specific settings

Load some computer-specific settings, such as the name and and email
address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar
Sveen's]] config.

In my case, the computers I use usually use the same username (my
name, go figure), so instead of basing the specific settings from the
username, I use the hostname. The shell command ~hostname -s~ gets the
hostname for the computer without any "domain information," such as
the ".local" suffix.

#+begin_src emacs-lisp
(require 'subr-x) ;; #'string-trim
(defvar fade/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(setq fade/user-settings-dir
      (concat user-emacs-directory
              "users/"
              (string-trim (shell-command-to-string "hostname -s"))))
(add-to-list 'load-path fade/user-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p fade/user-settings-dir)
  (mapc 'load (directory-files fade/user-settings-dir nil "^[^#].*el$")))
#+end_src

* Languages
** C/Java

I don't like the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
    {
    }
  return 0;
}
#+end_src

#+begin_src java
switch (number)
    {
    case 1:
        doStuff();
        break;
    case 2:
        doStuff();
        break;
    default:
        break;
    }
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my-c-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 4))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook 'my-c-mode-hook)
#+end_src

** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t)
#+END_SRC

** Common Lisp
*** Slime-Company
#+BEGIN_SRC emacs-lisp
  (use-package slime-company
    :ensure t)
#+END_SRC

*** Slime
#+BEGIN_SRC emacs-lisp
(use-package slime
    ;; :load-path "~/SourceCode/lisp/emacsmodes/slime"
    :ensure t
    :init
    (progn
      (setq slime-lisp-implementations
        '((sbcl ("/usr/local/bin/sbcl"))
          (ccl ("/usr/local/bin/ccl"))
          (ccl64 ("/usr/local/bin/ccl64"))
          (abcl ("/usr/local/src/abcl/abcl"))
          (clisp ("/usr/bin/clisp"))
          (ecl ("/usr/local/bin/ecl"))
          (decl ("/usr/bin/ecl"))
          (clojure ("/usr/bin/Clojure")))))
    :config
    (progn
      (slime-setup '(slime-fancy
                     slime-company
                     slime-indentation
                     slime-xref-browser
                     slime-tramp
                     slime-asdf
                     slime-autodoc))))
#+END_SRC

*** slime-repl-ansi-color
    If slime isn't loaded before this contrib, the contrib fails to
    load. This dependency ordering should be managed in use-package
    syntax, but I can't find the mechanism  and I don't have the time
    to read the code atm.
    
#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime-repl-ansi-color
  :load-path "site-lisp/slime-repl-ansi-color")
#+END_SRC

*** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (progn
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'slime-repl-mode-hook       #'enable-paredit-mode)
    (add-hook 'slime-mode-hook            #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
    (add-hook 'cider-repl-mode-hook       #'enable-paredit-mode)
    ))
#+END_SRC

** Hashicorp Configuration Language
#+BEGIN_SRC emacs-lisp
(use-package hcl-mode
  :ensure t)
#+END_SRC

** JavaScript
  #+BEGIN_SRC elisp
    (use-package js2-mode
      :ensure t
      :init
      (setq js-basic-indent 2)
      (setq-default js2-basic-indent 2
                    js2-basic-offset 2
                    js2-auto-indent-p t
                    js2-cleanup-whitespace t
                    js2-enter-indents-newline t
                    js2-indent-on-enter-key t
                    js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))

      (add-hook 'js2-mode-hook
                (lambda ()
                  (push '("function" . ?ƒ) prettify-symbols-alist)))

      (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
  #+END_SRC

    Color /defined/ variables with [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers-mode]]:

  #+BEGIN_SRC elisp
   (use-package color-identifiers-mode
       :ensure t
       :init
         (add-hook 'js2-mode-hook 'color-identifiers-mode))
  #+END_SRC

    While editing JavaScript is baked into Emacs, it is quite important
  to have [[http://flycheck.readthedocs.org/][flycheck]] validate the source based on [[http://www.jshint.com/][jshint]], and [[https://github.com/eslint/eslint][eslint]].
  Let’s prefer =eslint=:

  #+BEGIN_SRC elisp
    (add-hook 'js2-mode-hook
              (lambda () (flycheck-select-checker "javascript-eslint")))
  #+END_SRC

*** Refactoring JavaScript

    The [[https://github.com/magnars/js2-refactor.el][js2-refactor]] mode should start with =C-c .= and then a two-letter
    mnemonic shortcut.

    * =ef= is =extract-function=: Extracts the marked expressions out into a new named function.
    * =em= is =extract-method=: Extracts the marked expressions out into a new named method in an object literal.
    * =ip= is =introduce-parameter=: Changes the marked expression to a parameter in a local function.
    * =lp= is =localize-parameter=: Changes a parameter to a local var in a local function.
    * =eo= is =expand-object=: Converts a one line object literal to multiline.
    * =co= is =contract-object=: Converts a multiline object literal to one line.
    * =eu= is =expand-function=: Converts a one line function to multiline (expecting semicolons as statement delimiters).
    * =cu= is =contract-function=: Converts a multiline function to one line (expecting semicolons as statement delimiters).
    * =ea= is =expand-array=: Converts a one line array to multiline.
    * =ca= is =contract-array=: Converts a multiline array to one line.
    * =wi= is =wrap-buffer-in-iife=: Wraps the entire buffer in an immediately invoked function expression
    * =ig= is =inject-global-in-iife=: Creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression
    * =ag= is =add-to-globals-annotation=: Creates a =/*global */= annotation if it is missing, and adds the var at point to it.
    * =ev= is =extract-var=: Takes a marked expression and replaces it with a var.
    * =iv= is =inline-var=: Replaces all instances of a variable with its initial value.
    * =rv= is =rename-var=: Renames the variable on point and all occurrences in its lexical scope.
    * =vt= is =var-to-this=: Changes local =var a= to be =this.a= instead.
    * =ao= is =arguments-to-object=: Replaces arguments to a function call with an object literal of named arguments. Requires yasnippets.
    * =3i= is =ternary-to-if=: Converts ternary operator to if-statement.
    * =sv= is =split-var-declaration=: Splits a =var= with multiple vars declared, into several =var= statements.
    * =uw= is =unwrap=: Replaces the parent statement with the selected region.

  #+BEGIN_SRC elisp
  (use-package js2-refactor
    :ensure t
    :init   (add-hook 'js2-mode-hook 'js2-refactor-mode)
    :config (js2r-add-keybindings-with-prefix "C-c ."))
  #+END_SRC
  
*** Skewer

    I also configure Skewer for my [[file:emacs-web.org][HTML and CSS]] files, we need to do the
    same for JavaScript:

    #+BEGIN_SRC elisp
  (use-package skewer-mode
     :ensure t
     :init (add-hook 'js2-mode-hook 'skewer-mode))
    #+END_SRC

    Kick things off with =run-skewer=, and then:

   * C-x C-e :: `skewer-eval-last-expression'
   * C-M-x   :: `skewer-eval-defun'
   * C-c C-k :: `skewer-load-buffer'

* Misc
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview keybindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** OS X scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount (quote (0.01)))
#+end_src

** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src

